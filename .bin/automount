#!/bin/bash
# pbrisbin 2009, 2010
#
# just moves a rules file about to change udev behavior regarding the
# automounting of usb devices. 
#
# see http://wiki.archlinux.org/index.php/Udev for details.
#
###

USECOLOR='YES'

# get those fun BUSY/DONE messages
if [[ $(hostname) == htpc ]];then
  . /home/slave/.lib/functions
else
  . /home/demian/.lib/functions
fi

# if this file's present, automounting is 'on'
file='/etc/udev/rules.d/10-my-media-automount.rules'

message() { echo 'usage: automount [ start | stop | restart ]'; exit 1; }

# find the number of in-use drives and get the next available letter
get_next_letter() {
  local alph n
  
  alph=( $(echo {a..z}) )
  n=$(ls /dev/sd? 2>/dev/null | wc -l)

  echo "${alph[n]}"
}

# mount as /mnt/<label> or fall back on usbhd-sdxy
write_file() {
  local a="$(get_next_letter)"

  [[ -z "$a" ]] && return 1

  # 7/10/2010 + rule updated
  cat > "$file" << EOF
# /etc/udev/rules.d/10-my-media-automount.rules

# start at sdb to ignore the system hard drive
KERNEL!="sd[b-z]*", GOTO="my_media_automount_end"
ACTION=="add", PROGRAM!="/sbin/blkid %N", GOTO="my_media_automount_end"

# import some useful filesystem info as variables
IMPORT{program}="/sbin/blkid -o udev -p %N"

# get the label if present, otherwise assign one based on device/partition
ENV{ID_FS_LABEL}!="", ENV{dir_name}="%E{ID_FS_LABEL}"
ENV{ID_FS_LABEL}=="", ENV{dir_name}="usbhd-%k"

# create the dir in /media and symlink it to /media
ACTION=="add", RUN+="/bin/mkdir -p '/mnt/%E{dir_name}'"

# global mount options
ACTION=="add", ENV{mount_options}="relatime,users"

# filesystem-specific mount options (777/666 dir/file perms for ntfs/vfat) 
ACTION=="add", ENV{ID_FS_TYPE}=="vfat|ntfs", ENV{mount_options}="\$env{mount_options},exec,no_default_permissions,utf8,gid=1000,uid=1000,umask=022"

# automount ntfs filesystems using ntfs-3g driver
ACTION=="add", ENV{ID_FS_TYPE}=="ntfs", RUN+="/bin/mount -t ntfs-3g -o %E{mount_options} /dev/%k '/mnt/%E{dir_name}'"
# automount all other filesystems
ACTION=="add", ENV{ID_FS_TYPE}!="ntfs", RUN+="/bin/mount -t auto -o %E{mount_options} /dev/%k '/mnt/%E{dir_name}'"

# clean up after device removal
ACTION=="remove", ENV{dir_name}!="", RUN+="/bin/umount -l '/mnt/%E{dir_name}'", RUN+="/bin/rmdir '/mnt/%E{dir_name}'"

# exit
LABEL="my_media_automount_end"
EOF
#/dev/sdb1 on /mnt/usbhd-sdb1 type fuseblk (rw,nosuid,nodev,relatime,user_id=0,group_id=0,allow_other,blksize=4096)
#/dev/sdb1 on /mnt/usbhd-sdb1 type fuseblk (rw,nosuid,nodev,noexec,relatime,user_id=0,group_id=0,default_permissions,allow_other,blksize=4096)
}

# write out the file to enable automounting
turn_on() { 
  stat_busy 'Turning on automount'
  [[ -f "$file" ]] || write_file && stat_done || stat_fail
}

# remove the file to disable automounting
turn_off() { 
  stat_busy 'Turning off automount'
  [[ -f "$file" ]] && rm "$file" && stat_done || stat_fail
}

check_state() { [[ -f "$file" ]] && echo 'on' || echo 'off'; exit 0; }

# no args will just print current state
[[ -z "$1" ]] && check_state

# must be root to change things
[[ $(id -u) -ne 0 ]] && exit 1

case "$1" in
  start)   turn_on           ;;
  stop)    turn_off          ;;
  restart) turn_off; turn_on ;;
  *)       message           ;;
esac
