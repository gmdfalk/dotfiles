#!/usr/bin/env bash

# CONSTANTS

SP_VERSION="0.1"
SP_DEST="org.mpris.MediaPlayer2.spotify"
SP_PATH="/org/mpris/MediaPlayer2"
SP_MEMB="org.mpris.MediaPlayer2.Player"
export DISPLAY=:0
# SHELL OPTIONS

shopt -s expand_aliases

# UTILITY FUNCTIONS

function require {
    hash $1 2>/dev/null || {
        echo >&2 "Error: '$1' is required, but was not found."; exit 1;
    }
}

# COMMON REQUIRED BINARIES

# We need dbus-send to talk to Spotify.
require dbus-send

# Assert standard Unix utilities are available.
require grep
require sed
require cut
require tr

# 'SPECIAL' (NON-DBUS-ALIAS) COMMANDS

function sp-dbus {
    # Sends the given method to Spotify over dbus.
    dbus-send --print-reply --dest=$SP_DEST $SP_PATH $SP_MEMB.$1 ${*:2} > /dev/null
}

function sp-open {
    # Opens the given spotify: URI in Spotify.
    sp-dbus OpenUri string:$1
}

function sp-metadata {
    # Prints the currently playing track in a parseable format.

    dbus-send \
    --print-reply `# We need the reply.` \
    --dest=$SP_DEST \
    $SP_PATH \
    org.freedesktop.DBus.Properties.Get \
    string:"$SP_MEMB" string:'Metadata' \
    | grep -Ev "^method" `# Ignore the first line.` \
    | grep -Eo '("(.*)")|(\b[0-9][a-zA-Z0-9.]*\b)' `# Filter interesting fiels.`\
    | sed -E '2~2 a|' `# Mark odd fields.` \
    | tr -d '\n' `# Remove all newlines.` \
    | sed -E 's/\|/\n/g' `# Restore newlines.` \
    | sed -E 's/(xesam:)|(mpris:)//' `# Remove ns prefixes.` \
    | sed -E 's/^"//' `# Strip leading...` \
    | sed -E 's/"$//' `# ...and trailing quotes.` \
    | sed -E 's/"+/|/' `# Regard "" as seperator.` \
    | sed -E 's/ +/ /g' `# Merge consecutive spaces.`
}

function sp-status {
    # Prints the currently playing track in a friendly format.
    require column

    sp-metadata \
    | grep --color=never -E "(title)|(album)|(artist)" \
    | sed 's/^\(.\)/\U\1/' \
    | column -t -s'|'
}

function sp-eval {
    # Prints the currently playing track as shell variables, ready to be eval'ed
    require sort

    sp-metadata \
    | grep --color=never -E "(title)|(album)|(artist)|(trackid)|(trackNumber)" \
    | sort -r \
    | sed 's/^\([^|]*\)\|/\U\1/' \
    | sed -E 's/\|/="/' \
    | sed -E 's/$/"/' \
    | sed -E 's/^/SPOTIFY_/'
}

function sp-art {
    # Prints the artUrl.

    sp-metadata | grep "artUrl" | cut -d'|' -f2
}

function sp-display {
    # Calls display on the artUrl.

    require display
    display $(sp-art)
}

function sp-feh {
    # Calls feh on the artURl.

    require feh
    feh $(sp-art)
}

function sp-url {
    # Prints the HTTP url.

    TRACK=$(sp-metadata | grep "url" | cut -d'|' -f2 | cut -d':' -f3)
    echo "http://open.spotify.com/track/$TRACK"
}

function sp-clip {
    # Copies the HTTP url.

    require xclip
    sp-url | xclip
}

function sp-http {
    # xdg-opens the HTTP url.

    require xdg-open
    xdg-open $(sp-url)
}

function sp-help {
    # Prints usage information.
cat <<EOF
    Usage: spotc [command]
    Control a running Spotify instance from the command line.

     spotc playpause - Play/pause Spotify
     spotc pause - Pause Spotify
     spotc next - Go to next track
     spotc prev - Go to previous track

     spotc status - Format the currently playing track
     spotc metadata - Dump the current track's metadata
     spotc eval - Return the metadata as a shell script

     spotc art - Print the URL to the current track's album artwork
     spotc display - Display the current album artwork with `display`
     spotc feh - Display the current album artwork with `feh`

     spotc url - Print the HTTP URL for the currently playing track
     spotc clip - Copy the HTTP URL to the X clipboard
     spotc http - Open the HTTP URL in a web browser

     spotc open <uri> - Open a spotify: uri
     spotc search <q> - Start playing the best search result for the given query

     spotc version - Show version information
     spotc help - Show this information
    Any other argument will start a search (i.e. 'sp foo' will search for foo).
EOF
}

function sp-search {
    # Searches for tracks, plays the first result.

    require curl

    Q="$@"
    SPTFY_URI=$( \
    curl -s -G --data-urlencode "q=$Q" ws.spotify.com/search/1/track \
    | grep -E -o "spotify:track:[a-zA-Z0-9]+" -m 1 \
    )

    sp-open $SPTFY_URI
}

function sp-version {
    # Prints version information.

    echo "sp $SP_VERSION"
    echo "Copyright (C) 2013 Wander Nauta"
    echo "License MIT"
}

# 'SIMPLE' (DBUS-ALIAS) COMMANDS

alias sp-toggle=" sp-dbus PlayPause"
alias sp-playpause=" sp-dbus PlayPause"
alias sp-pause=" sp-dbus Pause"
alias sp-next=" sp-dbus Next"
alias sp-prev=" sp-dbus Previous"

# DISPATCHER

# First, we connect to the dbus session spotify is on. This isn't really needed
# when running locally, but is crucial when we don't have an X display handy
# (for instance, when running sp over ssh.)

function get-spotify-version {
    wine=false
    SPOTIFY_PID="$(pidof -s spotify)"
    if [[ -z "$SPOTIFY_PID" ]]; then
        SPOTIFY_PID="$(pidof -s spotify.exe)"
        wine=true
    fi
}

get-spotify-version
if [[ -z "$SPOTIFY_PID" ]]; then
    echo "Error: Spotify is not running."
    exit 1
fi

if [[ !$wine ]];then
    QUERY_ENVIRON="$(cat /proc/${SPOTIFY_PID}/environ | tr '\0' '\n' | grep "DBUS_SESSION_BUS_ADDRESS" | cut -d "=" -f 2-)"
    if [[ "${QUERY_ENVIRON}" != "" ]]; then
        export DBUS_SESSION_BUS_ADDRESS="${QUERY_ENVIRON}"
    fi
fi

# Then we dispatch the command.

subcommand="$1"

if [[ -z "$subcommand" ]]; then
    # No arguments given, print help.
    sp-help
else
    # Arguments given, check if it's a command.
    if $(type sp-$subcommand > /dev/null 2> /dev/null); then
        # It is. Run it.
        shift
        if [[ !wine ]];then
            eval "sp-$subcommand $@"
        else
            spotifycmd $@
        fi
    else
        # It's not. Try a search.
        eval "sp-search $@"
    fi
fi
