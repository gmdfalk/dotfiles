[alias]
    c = "commit --verbose"
    co = checkout
    cp = "cherry-pick"
    d = "diff -w"
    dc = "diff -w --cached"
    ds = "diff -w --staged"
    l = "!f() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }; f"
    ls = "!f() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -n 18; }; f"
    la = "log --abbrev-commit --pretty=fuller --show-signature"
    lm = "log --abbrev-commit --pretty=medium"
    ll = "log --pretty=format:'%Cred%h%Creset %s (%C(yellow)%ci%Creset) <%Cblue%cE%Creset> [%G?]'"
    lnew = "log HEAD@{1}..HEAD@{0}"
    lout = "log @{u}.."
    p = pull
    pr = "pull --rebase"
    s = "status"
    ss = "status -s"
    t = "tag"
    w = "whatchanged"    # Show logs with difference each commit introduces.
    up = "fetch && git rebase"
    l3 = "log --color=always --all --topo-order --abbrev-commit --date=human"

    tags = "tag -l"
    branches = "branch -a"
    remotes = "remote -v"
    stashes = "stash list"
    commits = "shortlog --summary --numbered"

    ci = "commit --interactive"                # Select which files/hunks should be part of the commit.
    ca = "commit -a"                           # Commit unstaged changes, i.e. perform git add and git rm as necessary.
    caa = "!git add -A && git commit -a"       # Commit all changes (including untracked files).
    cam = "commit --amend --reuse-message=HEAD" # Amend staged files to the latest commit
    cama = "commit -a --amend --reuse-message=HEAD" # Amend staged and unstaged files to the latest commit
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    fb = "!f() { git branch -a --contains $1; }; f" # Find branches containing commit
    ft = "!f() { git describe --always --contains $1; }; f" # Find tags containing commit
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f" # Find commits by source code
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f" # Find commits by commit message

    undo = reset --soft HEAD^
    stash-all = stash save --include-untracked
    unstage = "reset -q HEAD --"
    discard = "checkout --"
    uncommit = "reset --mixed HEAD~"
    amend = "commit --amend"
    nuke = "!git reset --hard HEAD && git clean -d -f"  # Not that common, hopefully.
    # Switch to a branch, creating it if necessary.
    switch = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!f() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; f"
    # Sign the most recent commit with your gpg key. The config variable user.signingkey has to be set.
    resign = "!f() { git stash && git commit --amend --reuse-message=HEAD --gpg-sign && git stash pop; }; f"
    # Remove branches that have already been merged with master.
    clean-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # Initialize and update all submodules recursively
    update-modules = "submodule update --init --recursive"
    # Diff in vim, ignoring whitespace.
    vimdiff = "!f() { git diff -w "$@" | vim -R -; }; f"

[apply]
    whitespace = "fix"
[core]
	excludesfile = "~/.gitignore.global"
    #attributesfile = "~/.gitattributes"
    whitespace = "space-before-tab,-indent-with-non-tab,trailing-space"
    trustctime = "false"
    precomposeunicode = "false"
[diff]
    renames = copies
    mnemonicprefix = true
[help]
    autocorrect = 1
[fetch]
    prune = true
[commit]
    verbose = True  # Available since git v2.9.
[merge]
    log = "true"
    ff = only
    conflictstyle = diff3
[rebase]
    autoStash = true
    stat = true
[push]
    default = simple
    followTags = true
[status]
    showUntrackedFiles = all
[color "branch"]
    current = "yellow reverse"
    local = "yellow"
    remote = "green"
[color "diff"]
    meta = "yellow bold"
    frag = "magenta bold"
    old = "red"             # deletions
    new = "green"           # additions
[color "status"]
    added = "yellow"
    changed = "green"
    untracked = "cyan"
[include]
    path = ".gitconfig.local"

