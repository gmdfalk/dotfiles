" Load the light-weight plugin manager vim-plug if it doesn't exist.
" Yup, it's that easy to install.
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

" {{{ Plugin Loader
call plug#begin()

" { Sensible vim defaults (https://github.com/tpope/vim-sensible). These include:
" Copy the indentation from the previous line when starting a new one.
"set autoindent

" Make backspace behave 'normal', i.e. delete indentation, end of line characters and cross line boundaries.
"set backspace=indent,eol,start

" Default completion is current buffer (.), buffers in other windows (w), other loaded buffers (b),
" unloaded buffers (u), tags (t) and included files (i).
" See http://usevim.com/2012/07/06/vim101-completion/ for full information on completion in vim.
" This configuration uses supertab for better-than-default completion.
" Remove included files from completion options.
"set complete-=i

" Make pressing <Tab> insert indentation based on the shiftwidth setting at the beginning of the line.
" Uses tabstop and softtabstop everywhere else.
"set smarttab

" By default vims <C-a> and <C-x> de-/incrementation of numbers works on decimal, hex and octal numbers.
"set nrformats-=octal

" Enable timeout for key codes, i.e. don't wait indefinitely for the next key to be pressed.
"set ttimeout
"set ttimeoutlen=100  " in milliseconds.

" Incrementally apply the search pattern, i.e. find results as we are typing.
"set incsearch

" Always display the status line.
"set laststatus=2

" Show line and column number of the cursor position.
"set ruler

" Enhance command-line completion. See :help wildmenu.
"set wildmenu

" Don't replace lines with "@" if they don't fit entirely on the screen.
"set display+=lastline

" Automatically reload files if they have been modified outside of vim but not inside vim unless it has been deleted.
"set autoread

" Don't save options and mappings with the session.
"set sessionoptions-=options

" Conditional options:
" The minimum number of lines above and below the cursor when scrolling. Only applied if not set yet.
"set scrolloff=1

" The minimum number of characters to the left of the cursor when scrolling.
"set sidescrolloff=5

" Highlight characters we don't want.
"set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" If version > 703, delete the comment character when joining commented lines.
"set formatoptions+=j

" If history is set to less than 1000:
"set history=1000

" If tabpagemax is set to less than 50:
"set tabpagemax=50

" If autocmd functionality is available, also enable language and indentation detection
" based on the file type. This is also required by scrooloose/nerdtree, minus the indent.
"filetype plugin indent on

" If the syntax highlighting feature is available and g:syntax_on is set:
"syntax enable

" Use <C-L> to clear the highlighting of :set hlsearch, unless it is already mapped.
"nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

Plug 'tpope/vim-sensible'
" }

" { Eye Candy
" Solarized colors (https://github.com/altercation/vim-colors-solarized)
Plug 'altercation/vim-colors-solarized'
" Status bar on steroids (https://github.com/vim-airline/vim-airline).
Plug 'vim-airline/vim-airline'
" Themes for the status bar (https://github.com/vim-airline/vim-airline/wiki/Screenshots).
Plug 'vim-airline/vim-airline-themes'
" }

" { NERDCommenter (https://github.com/scrooloose/nerdcommenter)
" Support for commenting/uncommenting in most languages via:
" * <Leader>cc (comment selected lines)
" * <Leader>cu (uncomment selected lines)
" * <Leader>c<Space> (toggle comment state of selected lines)
" * <Leader>cA (add comment delimiter at EOL and go into insert mode)
" * <Leader>c$ (comment from cursor to EOL)
" ...
Plug 'scrooloose/nerdcommenter'
" }

" Tree explorer plugin for navigating the filesystem and opening files/directories.
Plug 'scrooloose/nerdtree'

" Enhanced tab completion (https://github.com/ervandew/supertab).
Plug 'ervandew/supertab'

" Use <A-j> and <A-k> to move line/selection up/down with proper indenting (https://github.com/matze/vim-move).
Plug 'matze/vim-move'

" Incrementally expand selection using the same key (https://github.com/terryma/vim-expand-region).
Plug 'terryma/vim-expand-region'

" A wrapper for git (https://github.com/tpope/vim-fugitive).
Plug 'tpope/vim-fugitive'

call plug#end()
" }}}

" {{{ Plugin configuration
" { NERDTree
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
" Close vim when the only open window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Automatically open NERDTree if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" }

" { vim-move
" Somehow, Alt doesn't work as modifier, so use Ctrl instead, i.e. <C-k> and <C-j> to move lines up/down.
let g:move_key_modifier='C'
" }

" { vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" The text objects to use as anchors for selection.
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :1,
      \ 'i''' :1,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :1,
      \ 'ie'  :0,
      \ }
" }

" { vim-colors-solarized
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"let g:solarized_termtrans=1
"let g:solarized_termcolors=256
" }

" { vim-airline
let g:airline_theme='solarized'
let g:airline_powerline_fonts=0
" Enable the list of buffers
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_tab_nr=0
let g:airline#extensions#tabline#fnamemod=':t' " Show just the filenameendif
"let g:airline#extensions#tabline#tab_nr_type=1 " tab number
" }
" }}}

" {{{ Colors
"set t_Co=256
set background=dark
" Cygwin specific colorscheme
if has("win32unix")
    colorscheme slate
else
    colorscheme solarized
endif
" }}}

" {{{ Settings
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Allow cursor keys in insert mode
set esckeys

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Powerline settings
set encoding=utf-8 nobomb  " Use UTF-8 without BOM

" When writing a file, restore the EOL char at the EOF if it is missing.
"set fixeol

" Create a backup whenever writing to an existing file.
set backup
" Double trailing slash saves the path in the backup file name.
set backupdir=~/.vim/backups//
" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*,~/.vim/backups/*,~/.vim/swaps/*

" Create a swap file for every buffer to prevent multiple vim instances from editing the same file.
set swapfile
set directory=~/.vim/swaps//

if exists("&undodir")
    set undodir=~/.vim/undo
endif

" Always change to current directory.
set autochdir

" Respect modeline in files, e.g. vim: noai:ts=4:sw=4
set modeline

" Enable line numbers.
set number

" Highlight current line
set cursorline

" Always use spaces instead of tabs.
set expandtab

" Set the width of the TAB character to 4 characters.
set tabstop=4

" The number of characters to insert/delete when pressing <Tab> or <BS>.
set softtabstop=4

" The number of characters to shift left/right when pressing <<, >> or ==.
set shiftwidth=4

" By default, don't show listchars, e.g. tab, eol etc.
set nolist

" Highlight search results.
set hlsearch

" Ignore case in searches.
set ignorecase

" Dont' ignore case if there are capital letters in the search term.
set smartcase

" Enable mouse in all modes.
set mouse=a

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Strip trailing whitespace (<Leader>ss)
function! StripWhitespace()
    let save_cursor=getpos(".")
    let old_query=getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

" Automatic commands
if has("autocmd")
    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif

if has("gui_running")
   let s:uname=system("uname")
   if s:uname == "Darwin\n"
      set guifont=Inconsolata\ for\ Powerline:h13
   endif
endif

" Disable autocommenting on newline (messing with pasting)
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Automatically reload when vim config changes
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" {{{ Mappings
let mapleader="\<Space>"

nnoremap <Leader>w :w<CR>
nnoremap <Leader>W :w !sudo tee % > /dev/null<CR> " Save a file as root

"" Mode switching
" ESC is a buzzkill
noremap ö <ESC>
inoremap ö <ESC>

"" Text manipulation
noremap <Leader>ss :call StripWhitespace()<CR>

" {{{ Select & Paste
" Indentation can get messed when pasting into vim. When that happens, press F2 before pasting.
set pastetoggle=<F2>
" Select pasted text.
noremap gV `[v`]
" Paste above current line.
nnoremap <Leader>P :pu!<CR>
" Paste below current line
nnoremap <Leader>p :pu<CR>

noremap <Leader>nh :nohl<CR>
" }}}

"" Search and replace (see http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/)
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>


" Go to last active tab
let g:lasttab=1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab=tabpagenr()

" Repeat last command.
" Quickly replay the q macro.
noremap <Space>q @q

" {{{ Navigation
" Move by display lines instead of physical lines, e.g. when the wrap option is set and one line is broken into many.
" See http://yubinkim.com/?p=6.
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j
" }}}

" {{{ Mappings for the german keyboard.
" Repeat the last command. This is equivalent to :<Up><CR>.
noremap <Space>ö @:<CR>
" Pinkie of right hand rests on ö which is wasted space, really.
noremap ö <ESC>
inoremap ö <ESC>
" {, } and ` are also very inconvenient to type (AltGr+8/9 and Shift+` (left of BS))
"noremap <Space>j }
"noremap <Space>k {
"noremap <Space>ge `.
"noremap <Space>gc ``
" }}}

" {{{ Restore cursor position from last time we visited this file.
" See http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%

function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END
" }}}

" {{{ Relative line numbering
if exists("&relativenumber")
    set relativenumber
    "au BufReadPost * set relativenumber
    " Toggle relative number setting on the fly.
    nnoremap <Leader>trn :set relativenumber!<CR>
    " Disable relative line numbering in insert mode.
    autocmd InsertEnter * :set norelativenumber
    " But enable it any other mode.
    autocmd InsertLeave * :set relativenumber
endif
" }}}

" Enable per-directory .vimrc files and disable unsafe commands in them. Set at the end of ~/.vimrc as per the
" recommendations in :help secure.
set exrc
set secure

" {{{ Load local config file, if it exists.
let $LOCALFILE=expand("~/.vimrc.local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
" }}}